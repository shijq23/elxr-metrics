[build-system]
requires = ["flit_core"]
build-backend = "flit_core.buildapi"

[project]
name = "elxr-metrics"
authors = [{ name = "Jianqiang Shi", email = "jianqiang.shi@windriver.com" }]
description = "Simple Python Project for creating eLxr metrics reports"
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"
dynamic = ["version"]

dependencies = ["duckdb", "maxminddb"]

[project.optional-dependencies]
test = [
    "bandit[toml]",
    "black",
    "check-manifest",
    "flake8-bugbear",
    "flake8-docstrings",
    "flake8-formatter_junit_xml",
    "flake8",
    "flake8-pyproject",
    "pre-commit",
    "pylint",
    "pylint_junit",
    "pytest-cov",
    "pytest-mock",
    "pytest-runner",
    "pytest-xdist",
    "pytest",
    "ruff",
    "shellcheck-py",
]

[project.scripts]
elxr-metrics = "elxr_metrics.__main__:main"

[project.urls]
Documentation = "https://gitlab.com/elxr/website/elxr-metrics/-/blob/main/README.md"
Source = "https://gitlab.com/elxr/website/elxr-metrics"
Tracker = "https://gitlab.com/elxr/website/elxr-metrics/-/issues"

[tool.flit.module]
name = "elxr_metrics"

[tool.bandit]
exclude_dirs = ["build", "dist", "tests", "scripts"]
number = 4
recursive = true
targets = "src"

[tool.black]
target-version = ['py310', 'py311', 'py312']
line-length = 120
fast = true

[tool.codespell]
skip = "*.csv"
count = true
quiet-level = 3

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 100

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]
line_length = 120

[tool.pycodestyle]
max_line_length = 120

[tool.autopep8]
max_line_length = 120
ignore = ["E501", "W6"]
in-place = true
recursive = true
aggressive = 3

[tool.flake8]
max-line-length = 120
select = "F,E,W,B,B901,B902,B903"
exclude = [
    ".eggs",
    ".git",
    ".tox",
    "nssm",
    "obj",
    "out",
    "packages",
    "pywin32",
    "tests",
    "venv",
    "__pycache__",
    "swagger_client",
]
ignore = ["E722", "B001", "W503", "E203"]

[tool.pyright]
include = ["src"]
exclude = ["**/node_modules", "**/__pycache__"]
venv = "venv"

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.10"
pythonPlatform = "Linux"

executionEnvironments = [{ root = "src" }]

[tool.pytest.ini_options]
addopts = "--cov-report xml:coverage.xml --cov-report term --junitxml=report.xml --cov src --cov-fail-under 0 --cov-append -m 'not integration'"
#addopts = "-s -v -ra"
pythonpath = ["src"]
testpaths = "tests"
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]

[tool.ruff]
line-length = 120
indent-width = 4

target-version = "py310"

[tool.pylint]
extension-pkg-whitelist = [
    "numpy",
    "torch",
    "cv2",
    "pyodbc",
    "pydantic",
    "ciso8601",
    "netcdf4",
    "scipy",
]
ignore = "CVS"
ignore-patterns = "test.*?py,conftest.py"
init-hook = 'import sys; sys.setrecursionlimit(8 * sys.getrecursionlimit())'
jobs = 0
limit-inference-results = 100
persistent = "yes"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"
#exit-zero = "yes"

[tool.pylint.'MESSAGES CONTROL']
enable = "c-extension-no-member"

[tool.pylint.'REPORTS']
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
output-format = "text"
reports = "no"
score = "yes"

[tool.pylint.'REFACTORING']
max-nested-blocks = 5
never-returning-functions = "sys.exit"

[tool.pylint.'BASIC']
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar"]
class-attribute-naming-style = "any"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
include-naming-hint = "yes"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "any"
no-docstring-rgx = "^_"
property-classes = "abc.abstractproperty"
variable-naming-style = "snake_case"

[tool.pylint.'FORMAT']
ignore-long-lines = "^\\s*(# )?.*['\"]?<?https?://\\S+>?"
indent-after-paren = 4
indent-string = '    '
max-line-length = 120
max-module-lines = 1000
single-line-class-stmt = "no"
single-line-if-stmt = "no"

[tool.pylint.'LOGGING']
logging-format-style = "old"
logging-modules = "logging"

[tool.pylint.'MISCELLANEOUS']
notes = ["FIXME", "XXX", "TODO"]
#disable = "W0511"

[tool.pylint.'SIMILARITIES']
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "yes"
min-similarity-lines = 7

[tool.pylint.'SPELLING']
max-spelling-suggestions = 4
spelling-store-unknown-words = "no"

[tool.pylint.'STRING']
check-str-concat-over-line-jumps = "no"

[tool.pylint.'TYPECHECK']
contextmanager-decorators = "contextlib.contextmanager"
generated-members = "numpy.*,np.*,pyspark.sql.functions,collect_list"
ignore-mixin-members = "yes"
ignore-none = "yes"
ignore-on-opaque-inference = "yes"
ignored-classes = "optparse.Values,thread._local,_thread._local,numpy,torch,swagger_client"
ignored-modules = "numpy,torch,swagger_client,netCDF4,scipy"
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.'VARIABLES']
additional-builtins = "dbutils"
allow-global-unused-variables = "yes"
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = "no"
redefining-builtins-modules = "six.moves,past.builtins,future.builtins,builtins,io"

[tool.pylint.'CLASSES']
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = "cls"
valid-metaclass-classmethod-first-arg = "cls"

[tool.pylint.'DESIGN']
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.'IMPORTS']
allow-wildcard-with-all = "no"
analyse-fallback-blocks = "no"
deprecated-modules = "optparse,tkinter.tix"

[tool.pylint.'EXCEPTIONS']
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]
